#INCLUDE e_base.inc

[APPLICATIONS]
APP = sim_pin \
enable_shutoff \
axis.x.eoffset-enable/mode=toggle \
axis.y.eoffset-enable/mode=toggle \
axis.z.eoffset-enable/mode=toggle

APP = sim_pin \
axis.x.eoffset-scale \
axis.x.eoffset-counts \
axis.y.eoffset-scale \
axis.y.eoffset-counts \
axis.z.eoffset-scale \
axis.z.eoffset-counts

APP = halshow ./e.show

[HAL]
HALUI   = halui
HALFILE = LIB:basic_sim.tcl
POSTGUI_HALFILE = e_display.hal

HALCMD  = setp axis.x.eoffset-scale 0.1
HALCMD  = setp axis.y.eoffset-scale 0.1
HALCMD  = setp axis.z.eoffset-scale 0.1

HALCMD  = setp axis.x.eoffset-enable 1
HALCMD  = setp axis.y.eoffset-enable 1
HALCMD  = setp axis.z.eoffset-enable 1

# example hal logic for motion.set-trespass to:
#  1) program stop
#  2) machine off
# as enabled by the enable_shutoff signal
HALCMD  = loadrt and2 names=ande
HALCMD  = loadrt oneshot names=oshot1
HALCMD  = loadrt message names=limitmsg messages=STOP_on_SoftLimit"
HALCMD  = addf ande     servo-thread
HALCMD  = addf oshot1   servo-thread
HALCMD  = addf limitmsg servo-thread
HALCMD  = setp oshot1.width   0.1

# note: the signal 'trespass' is also used in e_display.hal
HALCMD  = net  trespass motion.eoffset-trespass => ande.in0

HALCMD  = net  z2 ande.out    => oshot1.in
HALCMD  = net  z3 oshot1.out  => halui.program.stop limitmsg.trigger\
                                 halui.machine.off
HALCMD  = net  enable_shutoff => ande.in1
HALCMD  = sets enable_shutoff 1
